"use strict";(self.webpackChunkpersonal_website=self.webpackChunkpersonal_website||[]).push([[5484],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={id:"ci-cd-docs",slug:"/using-ci-cd-docs",title:"Deploy Documentation",description:"Create a doc page with rich content with PyTabular and Power BI datasets.",sidebar_position:5,tags:["PyTabular","Getting started","Power BI","Microsoft","Azure DevOps","Static Web Apps"]},i=void 0,s={unversionedId:"using-docusaurus/ci-cd-docs",id:"using-docusaurus/ci-cd-docs",title:"Deploy Documentation",description:"Create a doc page with rich content with PyTabular and Power BI datasets.",source:"@site/docs/using-docusaurus/deploying-the-docs.md",sourceDirName:"using-docusaurus",slug:"/using-ci-cd-docs",permalink:"/docs/using-ci-cd-docs",draft:!1,tags:[{label:"PyTabular",permalink:"/docs/tags/py-tabular"},{label:"Getting started",permalink:"/docs/tags/getting-started"},{label:"Power BI",permalink:"/docs/tags/power-bi"},{label:"Microsoft",permalink:"/docs/tags/microsoft"},{label:"Azure DevOps",permalink:"/docs/tags/azure-dev-ops"},{label:"Static Web Apps",permalink:"/docs/tags/static-web-apps"}],version:"current",sidebarPosition:5,frontMatter:{id:"ci-cd-docs",slug:"/using-ci-cd-docs",title:"Deploy Documentation",description:"Create a doc page with rich content with PyTabular and Power BI datasets.",sidebar_position:5,tags:["PyTabular","Getting started","Power BI","Microsoft","Azure DevOps","Static Web Apps"]},sidebar:"tutorialSidebar",previous:{title:"Generate Documentation",permalink:"/docs/using-the-gen-docs"},next:{title:"Adventure Works",permalink:"/docs/adventure-works/"}},l={},u=[{value:"Create and Deploy Static Web App",id:"create-and-deploy-static-web-app",level:2},{value:"Add Generation of Docs on the fly",id:"add-generation-of-docs-on-the-fly",level:2},{value:"Generate Docs",id:"generate-docs",level:4},{value:"Deploy Docs",id:"deploy-docs",level:4},{value:"Example Pipeline",id:"example-pipeline",level:3},{value:"Example: Python Script.",id:"example-python-script",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"create-and-deploy-static-web-app"},"Create and Deploy Static Web App"),(0,o.kt)("p",null,"Creating and deploying a static web app on Azure is a great way to host your Docusaurus site. Dave Brook has written an excellent article on how to deploy a Docusaurus site via Azure DevOps Build pipeline and Azure Static Web Apps."),(0,o.kt)("p",null,"To get started, there are a few prerequisites that you'll need:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You'll need the necessary rights to create a static web app in Azure."),(0,o.kt)("li",{parentName:"ol"},"You'll also need a DevOps repository where you can store your Docusaurus site's source code.")),(0,o.kt)("p",null,"Once you have these prerequisites in place, you can follow ",(0,o.kt)("a",{parentName:"p",href:"https://www.daveabrock.com/2021/04/01/static-web-apps-azure-pipelines/"},"Dave's guide")," to set up a build pipeline and deploy your Docusaurus site to Azure Static Web Apps."),(0,o.kt)("p",null,"Keep in mind that while the Azure DevOps experience isn't as streamlined and elegant as the GitHub experience, it still offers great value for Azure DevOps customers. With Azure Static Web Apps support, you can build and deploy your app to Azure Static Web Apps with ease."),(0,o.kt)("h2",{id:"add-generation-of-docs-on-the-fly"},"Add Generation of Docs on the fly"),(0,o.kt)("p",null,"Once you've set up a basic pipeline in Azure DevOps for your Docusaurus site, you can also generate documentation based on your source code without having to execute a local script. This can be done using a build pipeline, a few command line tasks in the pipeline, and a git commit command."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Give correct access rights to ",(0,o.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/scripts/git-commands?view=azure-devops&tabs=yaml"},"deployment user"))),(0,o.kt)("p",null,"Here's how you can generate documentation using Azure DevOps:"),(0,o.kt)("h4",{id:"generate-docs"},"Generate Docs"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Set up a build job step with the latest version of Windows (",(0,o.kt)("inlineCode",{parentName:"li"},"windows-latest"),")"),(0,o.kt)("li",{parentName:"ol"},"Setup Python 3.10."),(0,o.kt)("li",{parentName:"ol"},"Execute a Python script that will generate the local files for the docs section of your site."),(0,o.kt)("li",{parentName:"ol"},"Upload the resulting files as Pipeline Artifacts.")),(0,o.kt)("h4",{id:"deploy-docs"},"Deploy Docs"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new job using the latest version of Ubuntu (",(0,o.kt)("inlineCode",{parentName:"li"},"ubuntu-latest"),")."),(0,o.kt)("li",{parentName:"ol"},"Download the Pipeline Artifacts from the previous job."),(0,o.kt)("li",{parentName:"ol"},"Build and deploy the static web app model."),(0,o.kt)("li",{parentName:"ol"},"Push the generated files back to the main branch using a set of Git commands.")),(0,o.kt)("p",null,"By following these steps, you can generate documentation for your Docusaurus site directly in Azure DevOps, without having to execute a local script. This will help automate the documentation generation process and ensure that your site is always up-to-date with the latest changes to your source code."),(0,o.kt)("p",null,"Good luck with your project!"),(0,o.kt)("h3",{id:"example-pipeline"},"Example Pipeline"),(0,o.kt)("p",null,"This is an example pipeline which, excecutes the steps above. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: $(Date:yyyyMMdd)-$(Rev:r)\n\npr:\n  branches:\n    include:\n      - main\n  paths:\n    include:\n        - site/*\n        \njobs:\n- job: generate_docs\n  displayName: Generate Documentation\n  condition: or(eq(variables['Build.Reason'], 'Manual'),eq(variables['Build.Reason'], 'PullRequest'))\n  pool:\n    vmImage: windows-latest\n  variables:\n  - group: deployment-group-prd\n  steps:\n  - checkout: self\n    submodules: true\n  - task: UsePythonVersion@0\n    displayName: 'Use Python 3.10'\n    inputs:\n      versionSpec: 3.10\n  - task: CmdLine@2\n    displayName: 'Install Python Tabular.'\n    inputs:\n      script: 'python3 -m pip install python-tabular'\n  - task: CmdLine@2\n    displayName: 'Generate Documentation for website > $(MODEL_NAME)'\n    inputs:\n      script: 'python3 document-models.py --model \"$(MODEL_NAME)\" --server \"$(SERVER_NAME)\" --workspace \"$(WORKSPACE_NAME)\" --user \"$(USER_ID)\" --password \"$(USER_PASSWORD)\" --translations \"$(USE_TRANSLATIONS)\"'\n\n  - publish: $(System.DefaultWorkingDirectory)/site/docs\n    displayName: 'Publish freshly generated docs.'\n    artifact: documentation\n  \n- job: build_and_deploy_job\n  displayName: Build and Deploy Job\n  dependsOn: generate_docs\n  condition: in(dependencies.generate_docs.result, 'Succeeded')\n  pool:\n    vmImage: ubuntu-latest\n  variables:\n  - group: deployment-group-prd\n  steps:\n  - checkout: self\n    submodules: true\n    persistCredentials: true\n  - task: DownloadPipelineArtifact@2\n    inputs:\n      artifact: 'documentation'\n      path: $(System.DefaultWorkingDirectory)/site/docs\n  - task: AzureStaticWebApp@0\n    displayName: \"Generate Docusaurus site\"\n    inputs:\n      azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)\n      app_location: \"/site/\" # App source code path\n      output_location: \"build\" # Built app content directory - optional\n  - task: CmdLine@2\n    displayName: 'Commit to Main > Results > Build for =  $(MODEL_NAME)'\n    inputs:\n      script: |\n        git config --global init.defaultbranch main\n        git config --global user.email \"example@email.com\"\n        git config --global user.name \"(Build Service)\"\n                \n        git add .\n        git commit -m \"Results > Build for =  $(MODEL_NAME)\"\n        git push -u origin main\n")),(0,o.kt)("h3",{id:"example-python-script"},"Example: Python Script."),(0,o.kt)("p",null,"This script can be used in the Build pipeline to generate the documentation for ",(0,o.kt)("em",{parentName:"p"},"one")," model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import pytabular\nimport getopt\nimport sys\nimport logging\n\nlogger = logging.getLogger("PyTabular")\n\nargument_list = sys.argv[1:]\n\nlogger.info(sys.argv)\n\n\n# Options\noptions = "s:m:u:p:w:c:d:t:"\n\n# Long options\nlong_options = [\n    "server=",\n    "model=",\n    "user=",\n    "password=",\n    "workspace=",\n    "catalog=",\n    "docs=",\n    "translations=",\n]\n\n# Parameters to define for connections\nSERVER_NAME, WORKSPACE_NAME, USER_ID, PASSWORD, MODEL_NAME, CONN_STR = (\n    None,\n    None,\n    None,\n    None,\n    None,\n    str(),\n)\n\n# Parameters to define for Docs.\nDOC_LOCATION = "docs"\nSELECTED_CULTURE = "en-US"\nUSE_TRANSLATIONS = False\n\ntry:\n    # Parsing argument\n    arguments, values = getopt.getopt(argument_list, options, long_options)\n\n    # checking each argument\n    for current_argument, current_value in arguments:\n        if current_argument in ("-s", "--server"):\n            SERVER_NAME = current_value\n        if current_argument in ("-m", "--model", "-c", "--catalog"):\n            MODEL_NAME = current_value\n        if current_argument in ("-w", "--workspace"):\n            WORKSPACE_NAME = current_value\n        if current_argument in ("-u", "--user"):\n            USER_ID = current_value\n        if current_argument in ("-p", "--password"):\n            PASSWORD = current_value\n        if current_argument in ("-d", "--docs"):\n            DOC_LOCATION = current_value\n        if current_argument in ("-t", "--translations"):\n            USE_TRANSLATIONS = current_value == "Yes"\n\n    if SERVER_NAME is not None and MODEL_NAME is not None:\n        CONN_STR = f"Provider=MSOLAP;Data Source={SERVER_NAME}"\n\n        if WORKSPACE_NAME is not None:\n            CONN_STR = f"{CONN_STR}/{WORKSPACE_NAME}"\n        if USER_ID is not None:\n            CONN_STR = f"{CONN_STR};User ID={USER_ID}"\n        if PASSWORD is not None:\n            CONN_STR = f"{CONN_STR};Password={PASSWORD}"\n\n        CONN_STR = f"{CONN_STR};Catalog={MODEL_NAME}"\n\n    else:\n        logger.warning("Arguments -m (--model) and -s (--server_name) are needed")\n        logger.warning(f"Server Name: {SERVER_NAME} > Model Name: {MODEL_NAME}")\n        CONN_STR = None\n\nexcept getopt.error as err:\n    # output error, and return with an error code\n    logger.warning(err)\n\nif CONN_STR is not None:\n    # Connect to a Tabular Model Model\n    model = pytabular.Tabular(CONN_STR)\n\n    # Initiate the Docs\n    docs = pytabular.ModelDocumenter(\n        model=model, save_location=f"{DOC_LOCATION}\\\\data-models"\n    )\n\n    # Set the translation for documentation to an available culture.\n    # By setting the Tranlsations to `True` it will check if it exists and if it does,\n    # it will start using the translations for the docs\n    if USE_TRANSLATIONS:\n        docs.set_translations(enable_translations=True, culture=SELECTED_CULTURE)\n\n    # # Generate the pages.\n    docs.generate_documentation_pages()\n\n    # # Save docs to the default location\n    docs.save_documentation()\nelse:\n    logger.warning(f"Connection String isn\'t correctly setup >> {CONN_STR}")\n')))}p.isMDXComponent=!0}}]);