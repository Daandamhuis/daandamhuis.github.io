"use strict";(self.webpackChunkpersonal_website=self.webpackChunkpersonal_website||[]).push([[5484],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),g=o,f=p["".concat(c,".").concat(g)]||p[g]||d[g]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1521:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={id:"ci-cd-docs",slug:"/using-ci-cd-docs",title:"Deploy Documentation via DevOps",description:"Create a doc page with rich content with PyTabular and Power BI datasets.",sidebar_position:4,tags:["PyTabular","Getting started","Power BI","Microsoft","Azure DevOps","Static Web Apps"]},i=void 0,s={unversionedId:"using-docusaurus/ci-cd-docs",id:"using-docusaurus/ci-cd-docs",title:"Deploy Documentation via DevOps",description:"Create a doc page with rich content with PyTabular and Power BI datasets.",source:"@site/docs/using-docusaurus/deploying-the-docs.md",sourceDirName:"using-docusaurus",slug:"/using-ci-cd-docs",permalink:"/docs/using-ci-cd-docs",draft:!1,tags:[{label:"PyTabular",permalink:"/docs/tags/py-tabular"},{label:"Getting started",permalink:"/docs/tags/getting-started"},{label:"Power BI",permalink:"/docs/tags/power-bi"},{label:"Microsoft",permalink:"/docs/tags/microsoft"},{label:"Azure DevOps",permalink:"/docs/tags/azure-dev-ops"},{label:"Static Web Apps",permalink:"/docs/tags/static-web-apps"}],version:"current",sidebarPosition:4,frontMatter:{id:"ci-cd-docs",slug:"/using-ci-cd-docs",title:"Deploy Documentation via DevOps",description:"Create a doc page with rich content with PyTabular and Power BI datasets.",sidebar_position:4,tags:["PyTabular","Getting started","Power BI","Microsoft","Azure DevOps","Static Web Apps"]},sidebar:"tutorialSidebar",previous:{title:"Generate Documentation",permalink:"/docs/using-the-gen-docs"},next:{title:"Adventure Works",permalink:"/docs/adventure-works/"}},c={},l=[{value:"Create Static Web App",id:"create-static-web-app",level:2},{value:"Deploy Static Web App",id:"deploy-static-web-app",level:2},{value:"Add Generation of Docs on the fly",id:"add-generation-of-docs-on-the-fly",level:2},{value:"Python Script &gt; Deploy Models.",id:"python-script--deploy-models",level:3}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"create-static-web-app"},"Create Static Web App"),(0,o.kt)("h2",{id:"deploy-static-web-app"},"Deploy Static Web App"),(0,o.kt)("h2",{id:"add-generation-of-docs-on-the-fly"},"Add Generation of Docs on the fly"),(0,o.kt)("h3",{id:"python-script--deploy-models"},"Python Script > Deploy Models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import pytabular\nimport getopt\nimport sys\nimport logging\n\nlogger = logging.getLogger("PyTabular")\n\nargument_list = sys.argv[1:]\n\nlogger.info(sys.argv)\n\n\n# Options\noptions = "s:m:u:p:w:c:d:t:"\n\n# Long options\nlong_options = [\n    "server=",\n    "model=",\n    "user=",\n    "password=",\n    "workspace=",\n    "catalog=",\n    "docs=",\n    "translations=",\n]\n\n# Parameters to define for connections\nSERVER_NAME, WORKSPACE_NAME, USER_ID, PASSWORD, MODEL_NAME, CONN_STR = (\n    None,\n    None,\n    None,\n    None,\n    None,\n    str(),\n)\n\n# Parameters to define for Docs.\nDOC_LOCATION = "docs"\nSELECTED_CULTURE = "en-US"\nUSE_TRANSLATIONS = False\n\ntry:\n    # Parsing argument\n    arguments, values = getopt.getopt(argument_list, options, long_options)\n\n    # checking each argument\n    for current_argument, current_value in arguments:\n        if current_argument in ("-s", "--server"):\n            SERVER_NAME = current_value\n        if current_argument in ("-m", "--model", "-c", "--catalog"):\n            MODEL_NAME = current_value\n        if current_argument in ("-w", "--workspace"):\n            WORKSPACE_NAME = current_value\n        if current_argument in ("-u", "--user"):\n            USER_ID = current_value\n        if current_argument in ("-p", "--password"):\n            PASSWORD = current_value\n        if current_argument in ("-d", "--docs"):\n            DOC_LOCATION = current_value\n        if current_argument in ("-t", "--translations"):\n            USE_TRANSLATIONS = current_value == "Yes"\n\n    if SERVER_NAME is not None and MODEL_NAME is not None:\n        CONN_STR = f"Provider=MSOLAP;Data Source={SERVER_NAME}"\n\n        if WORKSPACE_NAME is not None:\n            CONN_STR = f"{CONN_STR}/{WORKSPACE_NAME}"\n        if USER_ID is not None:\n            CONN_STR = f"{CONN_STR};User ID={USER_ID}"\n        if PASSWORD is not None:\n            CONN_STR = f"{CONN_STR};Password={PASSWORD}"\n\n        CONN_STR = f"{CONN_STR};Catalog={MODEL_NAME}"\n\n    else:\n        logger.warning("Arguments -m (--model) and -s (--server_name) are needed")\n        logger.warning(f"Server Name: {SERVER_NAME} > Model Name: {MODEL_NAME}")\n        CONN_STR = None\n\nexcept getopt.error as err:\n    # output error, and return with an error code\n    logger.warning(err)\n\nif CONN_STR is not None:\n    # Connect to a Tabular Model Model\n    model = pytabular.Tabular(CONN_STR)\n\n    # Initiate the Docs\n    docs = pytabular.ModelDocumenter(\n        model=model, save_location=f"{DOC_LOCATION}\\\\data-models"\n    )\n\n    # Set the translation for documentation to an available culture.\n    # By setting the Tranlsations to `True` it will check if it exists and if it does,\n    # it will start using the translations for the docs\n    if USE_TRANSLATIONS:\n        docs.set_translations(enable_translations=True, culture=SELECTED_CULTURE)\n\n    # # Generate the pages.\n    docs.generate_documentation_pages()\n\n    # # Save docs to the default location\n    docs.save_documentation()\nelse:\n    logger.warning(f"Connection String isn\'t correctly setup >> {CONN_STR}")\n')))}p.isMDXComponent=!0}}]);